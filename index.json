[{"categories":["技术"],"content":"Alfred Workflows 工作流 关键词 说明 Almanac !w 天气预报shell terminalfinder fi 在iTerm中打开当前Finder目录 if 在Finder中打开当前iTerm目录` 终端和Finder之间互相打开 Coinc cur 使用开放汇率 API 中的实时货币汇率进行货币转换 Disk Usage storage 查看内外部磁盘的使用存储空间 Emoji Wine wine 搜索表情符号 harvest 刷新API Epoch Converter ts 时间转换器 Fakeum fake xxx 生成虚假数据 Hackerboard hnf 搜索Hacker News Howdoi howdoi xxx 永远不要再打开浏览器寻求帮助 Icon Generator icon gen 将 SF 符号或表情符号转换为 .png Network wifi 显示和更改网络设置：Wi-Fi、以太网、VPN、DNS Network Quality netquality 网络质量 Oblique Strategies obl 倾斜策略是通过提供建议或激发新的思维方式来激发创造力的提示 Open Conference URL conf 根据即将发生的日历事件快速打开 Zoom 和其他会议服务的链接 Optimize Images （收费）压缩 SVG、JPEG、PNG 和 GIF 图像，删除臃肿的元数据。通过压缩图像而不损失质量来节省磁盘空间和带宽 Power Thesaurus pows xxx 同义词 powa xxx 反义词 Power同义词库 QR Code qrc xxx 创建二维码并将其复制到剪贴板 qrp xxx 创建二维码码并用预览打开 生成二维码 Share with AirDrop Universal Action 使用 AirDrop 发送文件、文本和 URL Simple diff clipdiff 比较两个最新的剪贴板条目 diff 比较两个文件或文件夹 查看文本、文件和目录中的差异 Start Recording audio rec 音频录制 screen rec 屏幕录制 webcam rec 网络摄像头录制 录制 Mac 音频、屏幕或网络摄像头的快捷方式 Yak Saver yak 类似番茄计时器 YoudaoTranslate yd xxx 有道翻译 DevToys encode 将字符串编码为 Base64、URL 和 HTML decode 从 Base64、URL 和 HTML 解码字符串 hash MD5、SHA1、SHA256、SHA512 的哈希字符串 jwt 用于接头、有效载荷的 JWT 解码器 checksumf MD5、SHA1、SHA256、SHA512 文件校验 uuid 生成UUID li 生成 Lorem Ipsum 文本（单词、句子、段落） qrcode 创建二维码 cc 将字符串转换为 camel、constant、dot、lower、lcfirst、no、param、pascal、path、sentence、snake、swap、title、upper、ucfirst 和主题标签大小写 nb 十进制、十六进制、八进制和二进制之间的基数转换 json JSON 格式为制表符、2 个空格、4 个空格缩进和缩小 imgbase64f 将 Base64 编码为 Base64 字符串、Base64 数据 URI、HTML 代码和 CSS 后台源 time 将 unix 时间/自然日期字符串转换为时间格式 ⬇⬇⬇API⬇⬇⬇ ChatGPT / DALL-E chatgpt （收费）ChatGPT 需要Plus账号提供API DeepL Translate dl （收费）DeepL翻译 ","date":"2024-05-10","objectID":"/posts/alfred-workflows/:0:0","tags":["Mac"],"title":"Alfred Workflows","uri":"/posts/alfred-workflows/"},{"categories":["技术"],"content":"Reference 在 Mac 上将 Python 3 设置为默认值的正确和错误方法 ","date":"2024-05-10","objectID":"/posts/alfred-workflows/:1:0","tags":["Mac"],"title":"Alfred Workflows","uri":"/posts/alfred-workflows/"},{"categories":["技术"],"content":"Mac Init ","date":"2024-05-10","objectID":"/posts/mac-init/:0:0","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"Apps 编程类 Jetbrains 续费20R/Y Visual Studio Code Docker 工具类 Xmind Crack by myself Snipaste Folx5 改成用多线程下载器，参考下面下载类 iTerm2 Alfred Crack by xclient PS Crack by xclient Microsoft Office 百度云盘 -\u003e https://www.jb51.net/softs/850625.html 下载类 Chrome 设置多线程下载 chrome://flags/ -\u003e Parallel downloading Tampermonkey插件，结合网盘脚本和下面工具突破限速问题 API下载 NeatDownloadManager Aria下载 XDown Proxy V2Ray 破解类 … 多媒体软件 Pro App（待定未买） ","date":"2024-05-10","objectID":"/posts/mac-init/:1:0","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"Terminal (Reference) 软件 作用 Homebrew 包管理器，轻松安装、更新和管理开源软件包。 iTerm2 功能强大的终端模拟器。 Oh My Zsh Zsh的框架和扩展工具，简化配置，提供主题和插件。 Powerlevel10K 基于Zsh的高度可定制命令行提示符主题。 ","date":"2024-05-10","objectID":"/posts/mac-init/:2:0","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"Set proxy # proxy 必须开启全局代理 https://github.com/Qingquan-Li/blog/issues/131 proxy () { export http_proxy=http://127.0.0.1:8024 export https_proxy=http://127.0.0.1:8024 # 如果代理需要身份验证，请添加以下行： # export HTTP_PROXY_USER=username # export HTTP_PROXY_PASS=password # 如果你使用 SOCKS 代理，请添加以下行： # export ALL_PROXY=socks5://your_proxy_address:port echo \"HTTP Proxy on, pls run 'curl cip.cc / ip.gs / ifconfig.co/json' to verify.\" } # noproxy noproxy () { unset http_proxy unset https_proxy # unset all_proxy echo \"HTTP Proxy off\" } ","date":"2024-05-10","objectID":"/posts/mac-init/:2:1","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"1. 安装 Homebrew 可简化 macOS 上软件安装的包管理器 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ","date":"2024-05-10","objectID":"/posts/mac-init/:2:2","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"2. 安装 iTerm2 一个强大的终端模拟器 brew install --cask iterm2 临时代理 export http_proxy=\"http://127.0.0.1:8024\" export https_proxy=$http_proxy 安装 RAR解压工具 brew install unar # decompression unar my_archive.rar ","date":"2024-05-10","objectID":"/posts/mac-init/:2:3","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"3. 安装 Zsh 增强终端 brew install zsh 设置 Shell #查看当前使用的Shell echo $Shell #修改默认Shell为zsh chsh -s /bin/zsh ","date":"2024-05-10","objectID":"/posts/mac-init/:2:4","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"4. 安装 Oh My Zsh 为 zsh 提供额外功能和定制选项的框架 sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 4.1. 设置 Oh My Zsh 插件 git npm sudo —按两次 esc 键追加前缀 fzf —模糊搜索 zsh-interactive-cd —交互式目录导航，依赖fzf zsh-z —快速导航到常用目录，类似 autojump Zsh Syntax Highlighting —命令行高亮 Zsh AutoSuggestions —命令自动补全 ","date":"2024-05-10","objectID":"/posts/mac-init/:2:5","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"5. 使用 Powerlevel10K 自定义 Oh My Zsh 一个自定义 Zsh 主题，提升终端体验。 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k p10k configure ","date":"2024-05-10","objectID":"/posts/mac-init/:2:6","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["技术"],"content":"6. 探索 Fzf 增强您的终端搜索功能 brew install fzf 安装有用的键绑定和模糊完成 # 使用：https://github.com/junegunn/fzf?tab=readme-ov-file#key-bindings-for-command-line $(brew --prefix)/opt/fzf/install ","date":"2024-05-10","objectID":"/posts/mac-init/:2:7","tags":["Mac"],"title":"Mac Init","uri":"/posts/mac-init/"},{"categories":["学习资料"],"content":"记录关于LLM相关资料 ","date":"2023-05-17","objectID":"/posts/awesome-llm/:0:0","tags":["LLM","GitHub"],"title":"Awesome LLM","uri":"/posts/awesome-llm/"},{"categories":["学习资料"],"content":"ChatGPT相关开源项目 名称 描述 ChatGPT plugin ChatGPT(LLM) 插件 AgentGPT 自主 AI 代理平台，通过思考要完成的任务、执行任务并从结果中学习来实现目标 OpenPromptStudio 提示词可视化编辑器 Bark 基于转换器的文本到音频模型 Text generation web UI 运行大型语言模型的Web用户界面，支持多种模型和功能 ChatGPT Desktop Application ChatGPT 客户端 OpenAI Cookbook 使用 OpenAI API 的示例和指南 Awesome ChatGPT Prompts ChatGPT 提示示例 Awesome-ChatGPT ChatGPT 资料汇总学习 ChatGPT-prompt-chs ChatGPT 中文咒语(Prompt)大全 awesome-chatgpt-prompts-zh ChatGPT 中文调教指南 ","date":"2023-05-17","objectID":"/posts/awesome-llm/:1:0","tags":["LLM","GitHub"],"title":"Awesome LLM","uri":"/posts/awesome-llm/"},{"categories":["学习资料"],"content":"其他AI应用平台 名称 描述 Forefront Chat 基于 GPT-4 的聊天体验，可以免费访问，具备图像生成功能。 MinisterAI 免费使用GPT、Stable Diffusion和Midjourney等绘图工具。 HuggingChat 聊天机器人，旨在作为 OpenAI 的 ChatGPT 的替代品。 ClickHouse 开源的列式数据库管理系统，快速分析大量数据的场景 FinChat AI驱动的聊天机器人和生成式人工智能工具，专为提供关于上市公司和投资者的信息和分析而设计。 GPT4All 本地运行、隐私感知的聊天机器人。无需 GPU 或互联网。 AskExperts 专注于设计、写作、社交媒体、商业等领域。他们提供智能解决方案，为您的业务带来实际效果。 Mindshow 自动生成幻灯片，避免了调整文本和图片大小的麻烦 AutoGPT 下一代AI技术，可以更全面地生成文本和代码，是一个实验性的开源应用程序。 kickresume 快速创建精美的简历 UseBLACKBOX 能够与各种集成开发环境（IDE）、网络浏览器、数据库等任何软件一起使用的人工智能工具。 AI Copilot 由人工智能驱动的互动式视觉故事，以增强理解力。（收费） AIPRM for ChatGPT 提示模板列表 Tome 将文档转化为PPT Removebg 智能抠图 Runway Gen2 利用文本输入来生成逼真的视频 ","date":"2023-05-17","objectID":"/posts/awesome-llm/:2:0","tags":["LLM","GitHub"],"title":"Awesome LLM","uri":"/posts/awesome-llm/"},{"categories":["学习资料"],"content":"Chrome插件 名称 描述 WebChatGPT 有網路存取功能的 ChatGPT Glarity Summary 為Google搜尋和YouTube影片等內容生成摘要。 AIPRM for ChatGPT 提示模板列表 论坛 ","date":"2023-05-17","objectID":"/posts/awesome-llm/:3:0","tags":["LLM","GitHub"],"title":"Awesome LLM","uri":"/posts/awesome-llm/"},{"categories":["学习资料"],"content":"Prompt 参考 适用于各种工作流程的 110 个最佳 ChatGPT 提示 215+ ChatGPT提示 50 个很棒的 ChatGPT 提示 ","date":"2023-05-17","objectID":"/posts/awesome-llm/:4:0","tags":["LLM","GitHub"],"title":"Awesome LLM","uri":"/posts/awesome-llm/"},{"categories":["学习资料"],"content":"ChatGPT Prompt 学习笔记 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:0:0","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"LLM LLM（Large Language Models，大型语言模型） 分为两种类型： 基础LLM(base LLM)：基于文本训练数据，训练出预测下一个单词能力的模型，其通常是在互联网和其他来源的大量数据上训练的。 指令微调LLM(instruction tuned LLM)：通过在基础LLM的基础上使用大量文本数据进行微调，进一步使用指令和人类反馈的强化学习技术来提高帮助性和遵循指令的能力。 与基础LLM相比，指令微调LLM更少输出有问题的文本，如毒性内容。 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:1:0","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"Prompt 使用指南 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:2:0","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"两个基本原则 编写清晰、具体的指令 分隔符 三重引号Triple quotes \"\"\" 三重反引号Triple backticks ``` 三重破折号Triple dashes --- 角括号Angle brackets \u003c\u003e XML标签XML tags \u003ctag\u003e \u003c\\tag\u003e 结构化的输出（Json、HTML） 检查是否满足条件（如果xxx，则xxx） 提供少量示例 给模型时间去思考 指定步骤 指导在做决策之前要思考解决方案 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:2:1","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"局限性 - 幻觉 幻觉 hallucinations：模型在训练过程中接触了大量的知识，它并没有完全记住所见的信息，因此它并不很清楚自己知识的边界。这意味着它可能会尝试回答有关晦涩主题的问题，并编造听起来合理但实际上并不正确的答案。 减少幻觉： 遵循两个基本原则 追溯源文档：先要求模型找到文本中的任何相关引用，然后要求它使用这些引用来回答问题 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:2:2","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"LLM 功能 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:3:0","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"文本概括 Summarizing 限制字数 要求生成不多于 xx 词 划重点 说明面向对象，应具有什么性质且侧重于什么方面 关键信息提取 （注意：“文本提取(Extract)“而非\"文本概括(Summarize)\"） ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:3:1","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"文本推断 Inferring 推断情感 情感（正向/负向） 用一个单词回答：「正面」或「负面」 识别情感类型 类型不超过五个，以逗号分隔的格式回答 识别喜悦/愤怒 xxx是否表达了喜悦？给出是或否的答案。 识别物品，名称 推断主题 推断5个主题 确定五个主题。每个主题用1-2个单词概括。输出时用逗号分割每个主题。 主题匹配（机器学习 Zero-Shot learning） 确定以下主题列表中的每个项目是否是以下文本中的主题。以 0 或 1 的形式给出答案列表。 e.g. 一次完成多项任务 从评论文本中识别以下项目： - 情绪（正面或负面） - 审稿人是否表达了愤怒？（是或否） - 评论者购买的物品 - 制造该物品的公司 评论用三个反引号分隔。将您的响应格式化为 JSON 对象，以 \"xxx\" 作为键。 如果信息不存在，请使用 \"未知\" 作为值。 让你的回应尽可能简短。 将 xxx 值格式化为布尔值。 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:3:2","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"文本转换 Transforming 文本翻译 单/多语种翻译 识别语种 翻译+正式语气 翻译成中文，分别展示成正式与非正式两种语气 通用翻译器（识别各个消息的语种，并翻译成目标用户的母语） 语气/风格调整（正式语气，书面用词，轻松口语化的语气等） 格式转换（JSON到HTML、XML、Markdown） 拼写及语法纠正（可以使用类Grammarly纠错示例，输入原始文本，输出纠正后的文本，并基于Redlines输出纠错过程。） e.g. 综合样例：文本翻译+拼写纠正+风格调整+格式转换 针对以下三个反引号之间的英文评论文本， 首先进行拼写及语法纠错， 然后将其转化成中文， 再将其转化成优质淘宝评论的风格，从各种角度出发，分别说明产品的优点与缺点，并进行总结。 润色一下描述，使评论更具有吸引力。 输出结果格式为： 【优点】xxx 【缺点】xxx 【总结】xxx 注意，只需填写xxx部分，并分段输出。 将结果输出成Markdown格式。 ```{text}``` ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:3:3","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"文本扩展 Expanding 生成文本 假设你是一个客户服务AI助手，你的任务是为客户发送电子邮件回复，根据通过三个反引号分隔的客户电子邮件，生成一封回复以感谢客户的评价。 温度 temperature （数值越大，输出越随机） e.g. 你是一名客户服务的AI助手。 你的任务是给一位重要的客户发送邮件回复。 根据通过\"```\"分隔的客户电子邮件生成回复，以感谢客户的评价。 如果情感是积极的或中性的，感谢他们的评价。 如果情感是消极的，道歉并建议他们联系客户服务。 请确保使用评论中的具体细节。 以简明和专业的语气写信。 以\"AI客户代理\"的名义签署电子邮件。 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:3:4","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["学习资料"],"content":"Reference ChatGPT Prompt Engineering for Developers 吴恩达《ChatGPT Prompt Engineering for Developers》课程的中文版 ","date":"2023-05-02","objectID":"/posts/prompt-engineering-note/:4:0","tags":["ChatGPT","LLM"],"title":"ChatGPT Prompt 学习笔记","uri":"/posts/prompt-engineering-note/"},{"categories":["技术"],"content":"通过 GitHub Action 构建 Hugo 自动部署博客到 GitHub Pages 流程图 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:0:0","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"一、使用 Hugo 搭建个人博客 该部分不做具体说明，详情可参考Hugo官方文档 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:1:0","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"Hugo 常用命令 # 创建新网站 xxx hugo new site xxx # 网站主题更换，本网站使用的是LoveIt # 1.克隆主题到themes目录，把主题存储库作为网站目录的子模块 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt # 2.向网站配置文件指示当前主题，或直接修改配置文件 (config.toml) 主题字段`theme` echo \"theme = 'LoveIt'\" \u003e\u003e config.toml # 生成新的文章草稿 hugo new posts/my-first-post.md # 启动开发服务器 hugo server # 发布网站 在项目根目录中创建整个静态网站 hugo ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:1:1","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"二、通过 GitHub Action 自动部署博客到 GitHub Pages 通过将代码推送到源码 repo，触发 GitHub Actions 自动运行 Hugo 工作流文件.github/workflows/gh-pages.yml，若运行成功后，则会自动发布到 GitHub Pages repo。 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:0","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"1. 创建代码存储库 我们需要在 GitHub 上创建两个存储库：源码 repo 和 GitHub Pages repo。 源码 repo： 私人存储库 用于存放博客源码 命名无要求 GitHub Pages repo 公开存储库 用于存放博客静态网页 命名规范：\u003cusername\u003e/\u003cusername\u003e.github.io 将 \u003cusername\u003e 替换为你的 GitHub 用户名 参考GitHub Pages ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:1","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"2. 创建个人访问令牌 GITHUB_TOKEN 没有权限访问外部存储库，而 deploy_key 或 personal_token 可以。 这里我们选择相对简单点的 personal_token 来创建Personal access tokens ，其中选择范围勾选：repo 和 admin:repo_hook 两项。 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:2","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"3. 源码 repo 中添加 Personal access tokens 源码 repo 的 settings -\u003e Secrets and variables -\u003e Actions 点击 New repository secret， Name 填：ACTION_ACCESS_TOKEN，对应上面工作流配置文件的 personal_token 字段值变量名， Secret 填上面创建的个人访问令牌Personal access tokens ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:3","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"4. 创建源码 repo 的 GitHub Actions 的工作流文件 切换到源码 repo 的 main 分支 在根目录创建一个 .github/workflows/gh-pages.yml 文件（参考使用 GitHub Action 构建 Hugo 和GitHub Pages 部署到外部存储库external_repository），Demo如下： name: github pages on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs / Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 # 在什么环境运行任务 steps: - uses: actions/checkout@v3 # 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 # hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: 'latest' # extended: true - name: Build run: hugo --minify # 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3 # 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo external_repository: \u003cusername\u003e/\u003cusername\u003e.github.io # 发布到哪个repo personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main # 发布到哪个branch ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:4","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"5. 推送远程触发 GitHub Actions 上述步骤完成后，需要先在本地执行 hugo server 确保网站运行正常。 将 Hugo 博客代码和上述配置文件提交并推送到 GitHub 的 源码 repo 后，可在 Actions 里看到上面的任务会自动运行。（若 Actions 运行报错，请检查第一步运行后生成的文件是否一起推送到 GitHub。） 上述步骤运行成功后，会自动发布到 GitHub Pages repo，等待该 repo 构建成功后，则可直接访问https://.github.io查看博客网站。 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:2:5","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["技术"],"content":"Reference Hugo官网 LoveIt主题网站配置 ","date":"2023-02-08","objectID":"/posts/hugo-to-github/:3:0","tags":["Hugo","GitHub"],"title":"Hugo to GitHub","uri":"/posts/hugo-to-github/"},{"categories":["学习资料"],"content":"Markdown 语法 仅作提醒作用 元素 Elements 语法 Syntax 描述 Description 块元素 Block Elements 段落和换行符 PARAGRAPHS AND LINE BREAKS 空行分隔创建段落 换行 \u003cbr /\u003e 大部分情况下，Markdown会自动处理段落和换行，不需要手动插入\u003cbr /\u003e标签。只有在特定需要保留换行效果的情况下，才需要使用两个或更多空格加回车来插入换行标签。 标题 HEADERS # H1 ### H3 === H1 --- H2 支持两种样式的标题： Atx：在行的开头使用 1-6 个 # 符号，对应于标头级别 1-6； Setext：任意数量的下划线=等号表示一级标题，任意数量的下划线-破折号表示二级标题。 块引用 BLOCKQUOTES \u003e This is an example of a blockquote. 可以只把 \u003e 放在段落的第一行之前； 可以嵌套（即块引用中的块引用）通过添加额外的级别 \u003e ； 可以包含其他 Markdown 元素。 列表 LISTS 有序（编号） ordered (numbered) 1. First 2. Second 3. Third 无序（项目符号） unordered (bulleted) * Red * Green * Blue 用于标记列表的实际数字对 Markdown 生成的 HTML 输出没有影响； 为了使列表看起来漂亮，可以缩进段落（wrap items with hanging indents）； 列表项中的每个后续段落都必须缩进 4 个空格或一个制表符； 列表项中代码块需要缩进_两次_——8 个空格或两个制表符； 列表项中块引用的 \u003e 分隔符需要缩进； 一行开头的_数字-句点-空格 序列_ number-period-space sequence，可以反斜杠 backslash 转义 escape 句点 1986\\. What a great season. ； 无序列表使用星号 asterisks * 、加号 pluses + 和连字符 hyphens - （可互换）作为列表标记。 代码块 CODE BLOCKS 将代码块的每一行缩进至少 4 个空格或 1 个制表符 代码块会继续，直到到达未缩进的行（或文章末尾）； 代码块中，与号 ( \u0026 ) 和尖括号 ( \u003c 和 \u003e ) 会自动转换为 HTML 实体； 代码块内不处理常规 Markdown 语法。 横线 HORIZONTAL RULES * * * *** ***** - - - ---------- 将三个或更多连字符 hyphens - 、星号 asterisks * 或下划线 underscores _ 单独放在一行上生成水平线标记 ( \u003chr /\u003e )； 可以在连字符或星号之间使用空格。 —– —– —– 跨度元素 Span Elements 链接 LINKS 内联 inline [example with an optional title](http://a.com/ \"Title\") [example](http://a.net/) has no title attribute 引用 reference [an example][id] reference-style link 使用空格来分隔括号组： [an example] [id] 然后，在文档的任何地方，您都可以像这样定义链接标签，单独占一行：[id]: http://a.com/ \"Optional Title Here\" 引用式链接的意义不在于它们更容易编写。关键是使用参考样式链接，您的文档源代码可读性大大提高。比较上面的例子：使用引用式链接，段落本身只有 81 个字符长；使用内联样式链接，它是 176 个字符；作为原始 HTML，它有 234 个字符。在原始 HTML 中，标记比文本多。 强调 EMPHASIS 粗体 bold ：double * 或 _ 斜体 italic ： * 或 _ *斜体* _斜体_ **粗体** __粗体__ 粗体（Bold）和斜体（Italic）用法的最佳实践 单词或短语的前后各添加三个星号或下划线 单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。 代码 CODE 用反引号 backtick quotes ` 将其括起来。与预先格式化的代码块不同，代码跨度表示普通段落内的代码。例如： Use the `printf()` function. 在代码范围内包含文字反引号字符，您可以使用多个反引号作为开始和结束分隔符： ``There is a literal backtick (`) here.`` 代码范围周围的反引号分隔符需要包含空格： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 图片 IMAGES 内联 感叹号 exclamation mark ! 开头 ： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \"Optional title\") 引用： ![Alt text][id] 其中“id”是定义的图像引用的名称。图像引用使用与链接引用相同的语法定义： [id]: url/to/image \"Optional title attribute\" Markdown 没有指定图像尺寸的语法，需要的话请使用常规 HTML \u003cimg\u003e 标记。 —– —– —– 其他元素 MISCELLANEOUS 自动链接 AUTOMATIC LINKS 尖括号 angle brackets 将 URL 或电子邮件地址括起来： \u003chttp://example.com/\u003e 显示一个 URL 或电子邮件地址的实际文本，并且让它成为一个可点击的链接，支持为 URL 和电子邮件地址创建“自动”链接的快捷方式 反斜杠转义 BACKSLASH ESCAPES 使用反斜杠转义来生成文字字符： \\*literal asterisks\\* 以下字符提供反斜杠转义： \\ backslash ` backtick * asterisk _ underscore {} curly braces [] square brackets () parentheses # hash mark + plus sign - minus sign (hyphen) . dot ! exclamation mark Reference JOHN GRUBER: Markdown Syntax Documentation markdownlint/Rules.md at v0.26.2 · DavidAnson/markdownlint · GitHub Basic writing and formatting syntax - GitHub Docs Markdown 语法速查表 | Markdown 官方教程 ","date":"2023-02-02","objectID":"/posts/markdown-syntax/:0:0","tags":["Markdown"],"title":"Markdown 语法","uri":"/posts/markdown-syntax/"}]